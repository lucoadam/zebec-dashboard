name: ECS Deployment (dev)

on:
  push:
    branches:
      - "dev"

env:
  ECR_REPOSITORY: dev-saas-zebec
  ECS_SERVICE: dev-frontend-svc
  ECS_CLUSTER: dev-saas-cluster
  ECS_TASK_DEFINITION: dev-frontend
  CONTAINER_NAME: main
  RPC_NETWORK: devnet

  DB_HOST: https://api.dev.zebec.io
  ZBC_AIRDROP: "[216,92,116,3,169,53,194,202,30,224,200,213,13,1,223,233,254,225,142,23,72,208,10,148,210,216,244,234,90,208,87,186,79,10,182,221,94,205,76,169,73,236,85,197,250,73,18,132,153,126,114,248,106,221,214,133,209,64,149,239,79,28,249,168]"

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: fe-${{ github.sha }}
        run: |
          docker build --build-arg RPC_NETWORK=${RPC_NETWORK} --build-arg DB_HOST=${DB_HOST}  --build-arg ZBC_AIRDROP=${ZBC_AIRDROP}  -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fetch Task Definition from Amazon ECS.
        id: fetch-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${ECS_TASK_DEFINITION} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true
